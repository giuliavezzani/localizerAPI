


#include <iostream>
#include <fstream>
#include <string>

#include <yarp/os/all.h>
#include <yarp/sig/all.h>
#include <yarp/dev/all.h>
#include <yarp/math/Rand.h>
#include <iCub/ctrl/math.h>
#include <iCub/iKin/iKinFwd.h>
#include <iCub/skinDynLib/skinContactList.h>
#include <CGAL/IO/Polyhedron_iostream.h>


#include "headers/localizer.h"
#include "headers/scalingSeries.h"
#include "headers/unscentedParticleFilter.h"



YARP_DECLARE_DEVICES(icubmod)
using namespace std;
using namespace yarp::os;
using namespace yarp::sig;
using namespace yarp::math;
using namespace yarp::dev;
using namespace iCub::ctrl;
using namespace iCub::iKin;
using namespace iCub::skinDynLib;

int main(int argc, char *argv[])
{
    
    ResourceFinder rf;
    rf.configure(argc,argv);
    rf.setDefaultContext("../../");
    int numTrials;
    numTrials=50;
   
    yarp::sig::Matrix solutions;
    solutions.resize(numTrials,4);
    yarp::sig::Vector error_indices;

    
//    Localizer *loc5=new UnscentedParticleFilter();
//   loc5->configure(rf);
//   for(size_t i=0; i<numTrials; i++)
//    {
//        error_indices=loc5->localization();
//        loc5->saveData(error_indices);
        
//      solutions.setRow(i,error_indices);
//    }
//       cout<<"error "<<error_indices.toString(3,5).c_str()<<endl;
//        cout<<"staticis "<<solutions.getRow(0).toString(3,3).c_str()<<endl;
//   loc5->saveStatisticsData(solutions);
    
//    delete loc5;
    
    
   Localizer *loc4=new ScalingSeries();
  loc4->configure(rf);
  yarp::sig::Vector result=loc4->localization();
  loc4->saveData(result);
        delete loc4;
    
 
    
    
    
    return 0;
}
